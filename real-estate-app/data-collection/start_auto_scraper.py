#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
"""

import os
import sys
import subprocess
import time
import logging
from pathlib import Path

def setup_logging():
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Å–∫—Ä–∏–ø—Ç—É –∑–∞–ø—É—Å–∫—É"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('auto_scraper_startup.log'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"""
    logger = logging.getLogger(__name__)
    logger.info("–ü–µ—Ä–µ–≤—ñ—Ä—è—é –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ...")

    required_packages = [
        'requests', 'beautifulsoup4', 'sqlalchemy', 'apscheduler', 'fake-useragent'
    ]

    missing_packages = []

    for package in required_packages:
        try:
            __import__(package)
            logger.info(f"‚úì {package}")
        except ImportError:
            logger.error(f"‚úó {package} –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            missing_packages.append(package)

    if missing_packages:
        logger.error(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏: {', '.join(missing_packages)}")
        logger.info("–í—Å—Ç–∞–Ω–æ–≤–ª—é—é –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ...")
        install_dependencies()
    else:
        logger.info("–í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ ‚úì")

def install_dependencies():
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"""
    logger = logging.getLogger(__name__)

    try:
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –∑ requirements.txt
        requirements_file = Path(__file__).parent / 'requirements.txt'
        if requirements_file.exists():
            logger.info("–í—Å—Ç–∞–Ω–æ–≤–ª—é—é –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –∑ requirements.txt...")
            subprocess.check_call([
                sys.executable, '-m', 'pip', 'install', '-r', str(requirements_file)
            ])
            logger.info("–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ ‚úì")
        else:
            logger.error("–§–∞–π–ª requirements.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            sys.exit(1)

    except subprocess.CalledProcessError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π: {e}")
        sys.exit(1)

def initialize_database():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
    logger = logging.getLogger(__name__)

    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        from database import DatabaseManager

        logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—é –±–∞–∑—É –¥–∞–Ω–∏—Ö...")
        db = DatabaseManager()
        db.create_tables()
        db.initialize_cities_and_districts()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ ‚úì")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
        logger.info("–ü—Ä–æ–¥–æ–≤–∂—É—é –±–µ–∑ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        # –ù–µ –≤–∏—Ö–æ–¥–∏–º–æ –∑ –ø–æ–º–∏–ª–∫–æ—é, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è

def check_environment_variables():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è"""
    logger = logging.getLogger(__name__)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
    db_url = os.getenv('DATABASE_URL')
    if not db_url:
        logger.info("DATABASE_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é SQLite –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º")
    else:
        logger.info(f"DATABASE_URL: {db_url[:50]}...")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Telegram –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')

    if bot_token and chat_id:
        logger.info("Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ ‚úì")
    else:
        logger.info("Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)")

def create_pid_file():
    """–°—Ç–≤–æ—Ä—é—î PID —Ñ–∞–π–ª –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É"""
    pid = os.getpid()
    pid_file = Path(__file__).parent / 'auto_scraper.pid'

    with open(pid_file, 'w') as f:
        f.write(str(pid))

    return pid_file

def cleanup_pid_file(pid_file):
    """–í–∏–¥–∞–ª—è—î PID —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ"""
    try:
        if pid_file.exists():
            pid_file.unlink()
    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ PID —Ñ–∞–π–ª: {e}")

def start_scraper():
    """–ó–∞–ø—É—Å–∫–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Å–∏—Å—Ç–µ–º—É –ø–∞—Ä—Å–∏–Ω–≥—É"""
    logger = logging.getLogger(__name__)

    logger.info("=" * 60)
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–á –°–ò–°–¢–ï–ú–ò –ü–ê–†–°–ò–ù–ì–£ –ù–ï–†–£–•–û–ú–û–°–¢–Ü")
    logger.info("=" * 60)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    check_dependencies()

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    initialize_database()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
    check_environment_variables()

    # –°—Ç–≤–æ—Ä—é—î–º–æ PID —Ñ–∞–π–ª
    pid_file = create_pid_file()

    try:
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –æ—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å –ø–∞—Ä—Å–∏–Ω–≥—É...")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å
        from auto_scraper import main

        # –û–±—Ä–æ–±–ª—è—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        import signal
        import atexit

        def signal_handler(signum, frame):
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à—É—é —Ä–æ–±–æ—Ç—É...")
            cleanup_pid_file(pid_file)
            sys.exit(0)

        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)
        atexit.register(lambda: cleanup_pid_file(pid_file))

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        main()

    except KeyboardInterrupt:
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise
    finally:
        cleanup_pid_file(pid_file)
        logger.info("–ü—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def check_running_process():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å –ø–∞—Ä—Å–∏–Ω–≥—É"""
    logger = logging.getLogger(__name__)

    pid_file = Path(__file__).parent / 'auto_scraper.pid'

    if pid_file.exists():
        try:
            with open(pid_file, 'r') as f:
                pid = int(f.read().strip())

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–æ—Ü–µ—Å —â–µ –∑–∞–ø—É—â–µ–Ω–æ
            import psutil
            if psutil.pid_exists(pid):
                process = psutil.Process(pid)
                if 'python' in process.name().lower():
                    logger.warning(f"–ü—Ä–æ—Ü–µ—Å –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ (PID: {pid})")
                    return True
                else:
                    logger.info(f"PID —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –Ω–µ Python –ø—Ä–æ—Ü–µ—Å, –≤–∏–¥–∞–ª—è—é")
                    pid_file.unlink()
            else:
                logger.info(f"–ü—Ä–æ—Ü–µ—Å –∑ PID {pid} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–¥–∞–ª—è—é PID —Ñ–∞–π–ª")
                pid_file.unlink()

        except Exception as e:
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ PID —Ñ–∞–π–ª—É: {e}")
            pid_file.unlink()

    return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–∫—Ä–∏–ø—Ç—É"""
    logger = setup_logging()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ
    if check_running_process():
        logger.error("–ü—Ä–æ—Ü–µ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!")
        logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ --force –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫—É")
        if len(sys.argv) > 1 and sys.argv[1] == '--force':
            logger.info("–ü—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–ø—É—Å–∫–∞—é –Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å...")
        else:
            sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏—Å—Ç–µ–º—É
    start_scraper()

if __name__ == "__main__":
    main()
