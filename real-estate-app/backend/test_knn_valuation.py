#!/usr/bin/env python3
"""
–¢–µ—Å—Ç KNN –∞–ª–≥–æ—Ä–∏—Ç–º—É –æ—Ü—ñ–Ω–∫–∏ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
"""

import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö–∏ –¥–æ –º–æ–¥—É–ª—ñ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'data-collection'))

from database import DatabaseManager
from knn_valuation_simple import SimpleKNNValuator

def test_knn_valuation():
    """–¢–µ—Å—Ç—É—î KNN –∞–ª–≥–æ—Ä–∏—Ç–º –æ—Ü—ñ–Ω–∫–∏"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è KNN –∞–ª–≥–æ—Ä–∏—Ç–º—É –æ—Ü—ñ–Ω–∫–∏ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ...")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î —Ç–∞ KNN –≤–∞–ª—é–∞—Ç–æ—Ä
    db_manager = DatabaseManager()
    knn_valuator = SimpleKNNValuator(db_manager, k=10)

    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏
    test_property = {
        'city': '–•–∞—Ä–∫—ñ–≤',
        'district': '–¶–µ–Ω—Ç—Ä',
        'area_total': 65.0,
        'rooms': 2,
        'floor': 4,
        'total_floors': 9,
        'building_type': 'brick',
        'year_built': 2010,
        'condition': 'good',
        'heating': 'central',
        'has_balcony': True,
        'has_elevator': True
    }

    print(f"üìä –¢–µ—Å—Ç—É—î–º–æ –æ—Ü—ñ–Ω–∫—É –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä–∏: {test_property['area_total']}–º¬≤, {test_property['rooms']} –∫—ñ–º–Ω–∞—Ç–∏, {test_property['district']}")

    # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ü—ñ–Ω–∫—É
    result = knn_valuator.estimate_price_simple(test_property, k=10)

    if result.get('error'):
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ü—ñ–Ω–∫–∏: {result['error']}")
        return False

    print("‚úÖ –û—Ü—ñ–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–∞!"    print(f"   üí∞ –û—Ü—ñ–Ω–µ–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {result['estimated_price']:,} –≥—Ä–Ω")
    print(f"   üìà –î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω: {result['price_range']['min']:,} - {result['price_range']['max']:,} –≥—Ä–Ω")
    print(f"   üéØ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {result['confidence']:.1%}")
    print(f"   üîç –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ö–æ–∂–∏—Ö –æ–±'—î–∫—Ç—ñ–≤: {result['similar_properties_count']}")
    print(f"   üìä –°–µ—Ä–µ–¥–Ω—è —Å—Ö–æ–∂—ñ—Å—Ç—å: {result['avg_similarity']:.1%}")

    # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø —Å—Ö–æ–∂–∏—Ö –æ–±'—î–∫—Ç—ñ–≤
    similar_props = result.get('similar_properties', [])
    if similar_props:
        print("\nüè† –¢–æ–ø —Å—Ö–æ–∂–∏—Ö –æ–±'—î–∫—Ç—ñ–≤:")
        for i, prop in enumerate(similar_props[:3], 1):
            print(f"   {i}. {prop['area_total']}–º¬≤, {prop['rooms']}–∫, {prop['building_type']}, {prop['price_uah']:,} –≥—Ä–Ω (—Å—Ö–æ–∂—ñ—Å—Ç—å: {prop['similarity']:.1%})")

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∏–Ω–∫—É
    market_stats = knn_valuator.get_market_stats(
        city=test_property.get('city'),
        district=test_property.get('district')
    )

    if market_stats:
        print("
üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏–Ω–∫—É:"        print(f"   üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—å: {market_stats['total_listings']}")
        print(f"   üí∞ –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: {market_stats['avg_price']:,} –≥—Ä–Ω")
        print(f"   üìè –¶—ñ–Ω–∞ –∑–∞ –º¬≤: {market_stats['avg_price_per_sqm']:,} –≥—Ä–Ω")
        print(f"   üìä –ú–µ–¥—ñ–∞–Ω–Ω–∞ —Ü—ñ–Ω–∞: {market_stats['median_price']:,} –≥—Ä–Ω")

    return True

def test_similarity_scoring():
    """–¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É –æ—Ü—ñ–Ω–∫–∏ —Å—Ö–æ–∂–æ—Å—Ç—ñ"""
    print("\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –æ—Ü—ñ–Ω–∫–∏ —Å—Ö–æ–∂–æ—Å—Ç—ñ...")

    db_manager = DatabaseManager()
    knn_valuator = SimpleKNNValuator(db_manager, k=5)

    # –¢–µ—Å—Ç–æ–≤—ñ –æ–±'—î–∫—Ç–∏ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    prop1 = {
        'city': '–•–∞—Ä–∫—ñ–≤',
        'district': '–¶–µ–Ω—Ç—Ä',
        'area_total': 60.0,
        'rooms': 2,
        'building_type': 'brick',
        'year_built': 2015,
        'condition': 'good'
    }

    prop2 = {
        'city': '–•–∞—Ä–∫—ñ–≤',
        'district': '–¶–µ–Ω—Ç—Ä',
        'area_total': 58.0,
        'rooms': 2,
        'building_type': 'brick',
        'year_built': 2015,
        'condition': 'good'
    }

    prop3 = {
        'city': '–•–∞—Ä–∫—ñ–≤',
        'district': '–°–∞–ª—Ç—ñ–≤–∫–∞',
        'area_total': 60.0,
        'rooms': 2,
        'building_type': 'panel',
        'year_built': 1980,
        'condition': 'fair'
    }

    # –¢–µ—Å—Ç—É—î–º–æ —Å—Ö–æ–∂—ñ—Å—Ç—å
    similarity_1_2 = knn_valuator.calculate_similarity_score(prop1, prop2)
    similarity_1_3 = knn_valuator.calculate_similarity_score(prop1, prop3)

    print(f"‚úÖ –°—Ö–æ–∂—ñ—Å—Ç—å prop1 vs prop2 (—ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ –º–∞–π–∂–µ): {similarity_1_2:.1%}")
    print(f"‚úÖ –°—Ö–æ–∂—ñ—Å—Ç—å prop1 vs prop3 (—Ä—ñ–∑–Ω—ñ —Ä–∞–π–æ–Ω–∏ —Ç–∞ —Ç–∏–ø–∏): {similarity_1_3:.1%}")

    if similarity_1_2 > similarity_1_3:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î —Å—Ö–æ–∂—ñ—Å—Ç—å!")
        return True
    else:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Å–∏—Å—Ç–µ–º—ñ —Å—Ö–æ–∂–æ—Å—Ç—ñ")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ KNN –∞–ª–≥–æ—Ä–∏—Ç–º—É –æ—Ü—ñ–Ω–∫–∏ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ\n")

    success = True

    # –¢–µ—Å—Ç 1: –û—Ü—ñ–Ω–∫–∞ –≤–∞—Ä—Ç–æ—Å—Ç—ñ
    success &= test_knn_valuation()

    # –¢–µ—Å—Ç 2: –°–∏—Å—Ç–µ–º–∞ —Å—Ö–æ–∂–æ—Å—Ç—ñ
    success &= test_similarity_scoring()

    if success:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
        print("üí° KNN –∞–ª–≥–æ—Ä–∏—Ç–º –æ—Ü—ñ–Ω–∫–∏ –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
    else:
        print("\n‚ùå –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏")
        print("üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –¥–∞–Ω—ñ –≤ –±–∞–∑—ñ")

    sys.exit(0 if success else 1)
