#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
"""

import psycopg2
import sys
import os

def test_postgresql_connection():
    """–¢–µ—Å—Ç—É—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL...")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (–∑–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à—ñ)
    connection_params = {
        'host': 'localhost',
        'port': 5432,
        'database': 'real_estate',
        'user': 'postgres',
        'password': 'your_password_here'  # –ó–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
    }

    try:
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        conn = psycopg2.connect(**connection_params)
        conn.autocommit = True
        cursor = conn.cursor()

        print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó PostgreSQL
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        print(f"üìã –í–µ—Ä—Å—ñ—è PostgreSQL: {version}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—å
        cursor.execute("""
            SELECT table_name
            FROM information_schema.tables
            WHERE table_schema = 'public'
                AND table_name IN ('cities', 'districts', 'property_listings', 'market_stats');
        """)

        tables = cursor.fetchall()
        print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—å: {len(tables)}")

        for table in tables:
            print(f"   - {table[0]}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤ –≤ —Ç–∞–±–ª–∏—Ü—ñ –º—ñ—Å—Ç
        cursor.execute("SELECT COUNT(*) FROM cities;")
        cities_count = cursor.fetchone()[0]
        print(f"üèôÔ∏è  –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ç: {cities_count}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤ –≤ —Ç–∞–±–ª–∏—Ü—ñ —Ä–∞–π–æ–Ω—ñ–≤
        cursor.execute("SELECT COUNT(*) FROM districts;")
        districts_count = cursor.fetchone()[0]
        print(f"üèòÔ∏è  –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–π–æ–Ω—ñ–≤: {districts_count}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å
        cursor.execute("SELECT COUNT(*) FROM property_listings;")
        listings_count = cursor.fetchone()[0]
        print(f"üè† –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—å: {listings_count}")

        # –¢–µ—Å—Ç KNN –∑–∞–ø–∏—Ç—É –∑ –ø—Ä–æ—Å—Ç–æ—é –µ–≤–∫–ª—ñ–¥–æ–≤–æ—é –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é
        print("\nüîç –¢–µ—Å—Ç KNN –∑–∞–ø–∏—Ç—É...")
        cursor.execute("""
            SELECT
                pl.id,
                pl.price_uah,
                pl.area_total,
                c.name as city,
                -- –ü—Ä–æ—Å—Ç–∞ –µ–≤–∫–ª—ñ–¥–æ–≤–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å (–ø—Ä–∞—Ü—é—î –±–µ–∑ PostGIS)
                CASE
                    WHEN pl.latitude IS NOT NULL AND pl.longitude IS NOT NULL
                    THEN SQRT(
                        ((pl.latitude - 49.9935) * (pl.latitude - 49.9935)) +
                        ((pl.longitude - 36.2304) * (pl.longitude - 36.2304))
                    ) * 111
                    ELSE NULL
                END as distance_km
            FROM property_listings pl
            JOIN cities c ON pl.city_id = c.id
            WHERE pl.is_active = TRUE AND pl.price_uah > 0
            ORDER BY distance_km ASC
            LIMIT 5;
        """)

        knn_results = cursor.fetchall()
        print(f"üìç –ó–Ω–∞–π–¥–µ–Ω–æ {len(knn_results)} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è KNN —Ç–µ—Å—Ç—É")

        for result in knn_results:
            print(f"   - {result[0]}: {result[1]} –≥—Ä–Ω, {result[2]}–º¬≤, –≤—ñ–¥—Å—Ç–∞–Ω—å: {result[3]:.1f} –∫–º" if result[3] else f"   - {result[0]}: {result[1]} –≥—Ä–Ω, {result[2]}–º¬≤")

        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü—ñ–Ω
        print("\nüìà –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü—ñ–Ω...")
        cursor.execute("""
            SELECT
                c.name as city,
                COUNT(*) as listings_count,
                AVG(pl.price_uah) as avg_price,
                AVG(pl.price_per_sqm) as avg_price_per_sqm
            FROM property_listings pl
            JOIN cities c ON pl.city_id = c.id
            WHERE pl.is_active = TRUE AND pl.price_uah > 0
            GROUP BY c.name
            ORDER BY avg_price DESC;
        """)

        stats = cursor.fetchall()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {len(stats)} –º—ñ—Å—Ç–∞—Ö:")

        for stat in stats:
            print(f"   - {stat[0]}: {stat[1]} –æ–≥–æ–ª–æ—à–µ–Ω—å, —Å–µ—Ä. —Ü—ñ–Ω–∞: {stat[2]:.0f} –≥—Ä–Ω, –∑–∞ –º¬≤: {stat[3]:.0f} –≥—Ä–Ω")

        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        cursor.close()
        conn.close()

        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
        print("üí° –í–∞—à–∞ PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –≥–æ—Ç–æ–≤–∞ –¥–ª—è KNN –æ—Ü—ñ–Ω–∫–∏ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ")
        return True

    except psycopg2.Error as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ PostgreSQL: {e}")
        print("üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä PostgreSQL")
        return False
    except Exception as e:
        print(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return False

def print_connection_help():
    """–î—Ä—É–∫—É—î –¥–æ–ø–æ–º–æ–≥—É –ø–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—é –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
    print("\nüîß –î–æ–ø–æ–º–æ–≥–∞ –ø–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—é PostgreSQL:")
    print("1. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å PostgreSQL: https://postgresql.org/download/")
    print("2. –°—Ç–≤–æ—Ä—ñ—Ç—å –±–∞–∑—É –¥–∞–Ω–∏—Ö: CREATE DATABASE real_estate;")
    print("3. –ó–º—ñ–Ω—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤ —Ü—å–æ–º—É —Ñ–∞–π–ª—ñ:")
    print("   connection_params = {")
    print("       'host': 'localhost',")
    print("       'port': 5432,")
    print("       'database': 'real_estate',")
    print("       'user': 'postgres',")
    print("       'password': 'your_password_here'")
    print("   }")
    print("4. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python test_postgresql_connection.py")

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n")

    success = test_postgresql_connection()

    if not success:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤")
        print_connection_help()
        sys.exit(1)
    else:
        print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
        sys.exit(0)
