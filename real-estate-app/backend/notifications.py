"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏
"""

from fastapi import APIRouter, HTTPException, Depends, BackgroundTasks
from pydantic import BaseModel
from typing import Dict, List, Optional, Any
import json
import logging
from datetime import datetime, timedelta
import asyncio

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/notifications", tags=["notifications"])

# –ú–æ–¥–µ–ª—å –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
class NotificationSubscription(BaseModel):
    endpoint: str
    keys: Dict[str, str]
    settings: Dict[str, bool]

# –ú–æ–¥–µ–ª—å –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–ø–æ–≤—ñ—â–µ–Ω—å
class NotificationSettings(BaseModel):
    new_listings: bool = True
    price_changes: bool = True
    market_updates: bool = False
    weekly_digest: bool = False

# –°—Ö–æ–≤–∏—â–µ –ø—ñ–¥–ø–∏—Å–æ–∫ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ - –±–∞–∑–∞ –¥–∞–Ω–∏—Ö)
subscriptions_db = {}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
async def send_push_notification(subscription: Dict, payload: Dict) -> bool:
    """
    –ù–∞–¥—Å–∏–ª–∞—î push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    """
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±—É–¥–µ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ web-push –±—ñ–±–ª—ñ–æ—Ç–µ–∫–æ—é
        # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, pywebpush –∞–±–æ aiowebpush

        # –¢–∏–º—á–∞—Å–æ–≤–∞ —Å–∏–º—É–ª—è—Ü—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
        logger.info(f"–ù–∞–¥—Å–∏–ª–∞—é —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞ {subscription['endpoint'][:50]}...")
        logger.info(f"Payload: {json.dumps(payload, ensure_ascii=False)}")

        # –°–∏–º—É–ª—é—î–º–æ —É—Å–ø—ñ—à–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
        await asyncio.sleep(0.1)

        return True

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
        return False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å
async def check_new_listings():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±—É–¥–µ –∑–∞–ø–∏—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        # –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å

        # –¢–∏–º—á–∞—Å–æ–≤–∞ —Å–∏–º—É–ª—è—Ü—ñ—è
        new_listings = [
            {
                "id": "new_123",
                "title": "–ù–æ–≤–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä—ñ",
                "price": 2500000,
                "district": "–¶–µ–Ω—Ç—Ä",
                "url": "https://example.com/listing/123"
            }
        ]

        return new_listings

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å: {e}")
        return []

# –§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
async def send_notification_task(subscription_data: Dict, notification_type: str):
    """–§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"""

    try:
        subscription = subscription_data['subscription']
        settings = subscription_data['settings']

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Ü–µ–π —Ç–∏–ø —Å–ø–æ–≤—ñ—â–µ–Ω—å
        if not settings.get(notification_type, False):
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ payload —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
        payloads = {
            'new_listings': {
                'title': 'üÜï –ù–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
                'body': '–ó\'—è–≤–∏–ª–∏—Å—è –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –≤–∞—à–æ–º—É —Ä–∞–π–æ–Ω—ñ',
                'icon': '/favicon.ico',
                'badge': '/favicon.ico',
                'data': {
                    'type': 'new_listings',
                    'url': '/map',
                    'timestamp': datetime.utcnow().isoformat()
                }
            },
            'price_changes': {
                'title': 'üìâ –ó–º—ñ–Ω–∞ —Ü—ñ–Ω',
                'body': '–¶—ñ–Ω–∏ –Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å –∑–º—ñ–Ω–∏–ª–∏—Å—è –Ω–∞ 5%',
                'icon': '/favicon.ico',
                'badge': '/favicon.ico',
                'data': {
                    'type': 'price_changes',
                    'url': '/analytics',
                    'timestamp': datetime.utcnow().isoformat()
                }
            },
            'market_updates': {
                'title': 'üìä –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∏–Ω–∫—É',
                'body': '–©–æ—Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç –ø—Ä–æ —Å—Ç–∞–Ω —Ä–∏–Ω–∫—É –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ',
                'icon': '/favicon.ico',
                'badge': '/favicon.ico',
                'data': {
                    'type': 'market_updates',
                    'url': '/analytics',
                    'timestamp': datetime.utcnow().isoformat()
                }
            },
            'weekly_digest': {
                'title': 'üìã –¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç',
                'body': '–ü—ñ–¥—Å—É–º–æ–∫ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏—Ö –∑–º—ñ–Ω –∑–∞ —Ç–∏–∂–¥–µ–Ω—å',
                'icon': '/favicon.ico',
                'badge': '/favicon.ico',
                'data': {
                    'type': 'weekly_digest',
                    'url': '/analytics',
                    'timestamp': datetime.utcnow().isoformat()
                }
            }
        }

        payload = payloads.get(notification_type)
        if payload:
            success = await send_push_notification(subscription, payload)
            if success:
                logger.info(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è {notification_type} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            else:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è {notification_type}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ–Ω–æ–≤—ñ–π –∑–∞–¥–∞—á—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å: {e}")

# API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏

@router.post("/subscribe")
async def subscribe_to_notifications(subscription_data: NotificationSubscription):
    """–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
    try:
        endpoint = subscription_data.endpoint

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
        subscriptions_db[endpoint] = {
            'subscription': {
                'endpoint': subscription_data.endpoint,
                'keys': subscription_data.keys
            },
            'settings': subscription_data.settings,
            'subscribed_at': datetime.utcnow().isoformat()
        }

        logger.info(f"–ù–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å–Ω–∏–∫: {endpoint[:50]}...")
        return {"message": "–ü—ñ–¥–ø–∏—Å–∫–∞ —É—Å–ø—ñ—à–Ω–∞", "status": "subscribed"}

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")

@router.post("/unsubscribe")
async def unsubscribe_from_notifications(data: Dict):
    """–í—ñ–¥–ø–∏—Å–∫–∞ –≤—ñ–¥ push-—Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    try:
        endpoint = data.get('endpoint')

        if endpoint in subscriptions_db:
            del subscriptions_db[endpoint]
            logger.info(f"–í—ñ–¥–ø–∏—Å–∞–Ω–æ: {endpoint[:50]}...")
            return {"message": "–í—ñ–¥–ø–∏—Å–∫–∞ —É—Å–ø—ñ—à–Ω–∞", "status": "unsubscribed"}
        else:
            raise HTTPException(status_code=404, detail="–ü—ñ–¥–ø–∏—Å–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–∏—Å–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–∏—Å–∫–∏ –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å")

@router.put("/settings")
async def update_notification_settings(settings: NotificationSettings, endpoint: str = None):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    try:
        if endpoint and endpoint in subscriptions_db:
            subscriptions_db[endpoint]['settings'] = settings.dict()
            logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è {endpoint[:50]}...")
            return {"message": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ", "settings": settings.dict()}
        else:
            raise HTTPException(status_code=404, detail="–ü—ñ–¥–ø–∏—Å–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")

@router.get("/subscribers")
async def get_subscribers():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)"""
    try:
        return {
            "count": len(subscriptions_db),
            "subscribers": list(subscriptions_db.keys())[:10]  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
        }
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤: {e}")
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤")

@router.post("/send-test")
async def send_test_notification(endpoint: str = None):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
    try:
        if endpoint and endpoint in subscriptions_db:
            subscription_data = subscriptions_db[endpoint]

            payload = {
                'title': 'üß™ –¢–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
                'body': '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ',
                'icon': '/favicon.ico',
                'badge': '/favicon.ico',
                'data': {
                    'type': 'test',
                    'url': '/',
                    'timestamp': datetime.utcnow().isoformat()
                }
            }

            success = await send_push_notification(subscription_data['subscription'], payload)

            if success:
                return {"message": "–¢–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ"}
            else:
                raise HTTPException(status_code=500, detail="–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
        else:
            raise HTTPException(status_code=404, detail="–ü—ñ–¥–ø–∏—Å–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")

@router.post("/broadcast")
async def broadcast_notification(
    notification_type: str,
    background_tasks: BackgroundTasks,
    title: str = None,
    body: str = None
):
    """–†–æ–∑—Å–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å –≤—Å—ñ–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º"""
    try:
        if not subscriptions_db:
            return {"message": "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤", "sent": 0}

        sent_count = 0

        # –°—Ç–≤–æ—Ä—é—î–º–æ payload —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        default_payloads = {
            'new_listings': {
                'title': title or 'üÜï –ù–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
                'body': body or '–ó\'—è–≤–∏–ª–∏—Å—è –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –≤–∞—à–æ–º—É —Ä–∞–π–æ–Ω—ñ',
                'icon': '/favicon.ico',
                'badge': '/favicon.ico',
            },
            'price_changes': {
                'title': title or 'üìâ –ó–º—ñ–Ω–∞ —Ü—ñ–Ω',
                'body': body or '–¶—ñ–Ω–∏ –Ω–∞ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å –∑–º—ñ–Ω–∏–ª–∏—Å—è',
                'icon': '/favicon.ico',
                'badge': '/favicon.ico',
            },
            'market_updates': {
                'title': title or 'üìä –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∏–Ω–∫—É',
                'body': body or '–©–æ—Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç –ø—Ä–æ —Å—Ç–∞–Ω —Ä–∏–Ω–∫—É',
                'icon': '/favicon.ico',
                'badge': '/favicon.ico',
            },
            'weekly_digest': {
                'title': title or 'üìã –¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç',
                'body': body or '–ü—ñ–¥—Å—É–º–æ–∫ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏—Ö –∑–º—ñ–Ω –∑–∞ —Ç–∏–∂–¥–µ–Ω—å',
                'icon': '/favicon.ico',
                'badge': '/favicon.ico',
            }
        }

        payload = default_payloads.get(notification_type)
        if not payload:
            raise HTTPException(status_code=400, detail="–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")

        # –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
        payload['data'] = {
            'type': notification_type,
            'url': '/map' if notification_type == 'new_listings' else '/analytics',
            'timestamp': datetime.utcnow().isoformat()
        }

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—ñ–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º –≤ —Ñ–æ–Ω—ñ
        for endpoint, subscription_data in subscriptions_db.items():
            if subscription_data['settings'].get(notification_type, False):
                background_tasks.add_task(
                    send_push_notification,
                    subscription_data['subscription'],
                    payload
                )
                sent_count += 1

        logger.info(f"–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω—å: {sent_count}")
        return {
            "message": f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ {sent_count} –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º",
            "sent": sent_count,
            "total_subscribers": len(subscriptions_db)
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å: {e}")
        raise HTTPException(status_code=500, detail="–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å")

# –§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å
async def check_and_notify_new_listings():
    """–§–æ–Ω–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
    try:
        new_listings = await check_new_listings()

        if new_listings:
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—ñ–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º
            await broadcast_notification('new_listings')

            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(new_listings)} –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å, –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
        else:
            logger.info("–ù–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ–Ω–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
def schedule_notifications():
    """–ü–ª–∞–Ω—É—î —Ä–µ–≥—É–ª—è—Ä–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±—É–¥–µ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ (celery, APScheduler —Ç–æ—â–æ)
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
    pass

# –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ main.py
__all__ = [
    'router',
    'check_and_notify_new_listings',
    'broadcast_notification'
]
