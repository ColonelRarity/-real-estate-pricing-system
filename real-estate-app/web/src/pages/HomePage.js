import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Grid,
  Card,
  CardContent,
  Button,
  Chip,
  LinearProgress,
  Alert,
  Paper,
} from '@mui/material';
import {
  Assessment as AssessmentIcon,
  Map as MapIcon,
  Analytics as AnalyticsIcon,
  Speed as SpeedIcon,
  DataUsage as DataIcon,
  Psychology as PsychologyIcon,
} from '@mui/icons-material';
import { Link } from 'react-router-dom';
import { propertyAPI } from '../services/api';
import useOfflineData from '../hooks/useOfflineData';

const HomePage = () => {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const {
    offlineData,
    isOnline,
    isDataFresh,
    updateOfflineData,
    forceUpdate,
  } = useOfflineData();

  useEffect(() => {
    loadStats();
  }, []);

  const loadStats = async () => {
    try {
      setLoading(true);
      setError(null);

      // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Å–≤—ñ–∂—ñ –æ—Ñ—Ñ–ª–∞–π–Ω –¥–∞–Ω—ñ
      if (offlineData.marketStats['–•–∞—Ä–∫—ñ–≤'] && isDataFresh) {
        setStats(offlineData.marketStats['–•–∞—Ä–∫—ñ–≤']);
        console.log('üì¶ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –æ—Ñ—Ñ–ª–∞–π–Ω –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        return;
      }

      // –Ø–∫—â–æ –Ω–µ–º–∞—î —Å–≤—ñ–∂–∏—Ö –¥–∞–Ω–∏—Ö –∞–±–æ –æ–Ω–ª–∞–π–Ω, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ —Å–µ—Ä–≤–µ—Ä–∞
      if (isOnline) {
        const response = await propertyAPI.getMarketStats('–•–∞—Ä–∫—ñ–≤');
        setStats(response.data);
        console.log('üåê –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ —Å–µ—Ä–≤–µ—Ä–∞');
      } else {
        // –Ø–∫—â–æ –æ—Ñ—Ñ–ª–∞–π–Ω —ñ –¥–∞–Ω—ñ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (offlineData.marketStats['–•–∞—Ä–∫—ñ–≤']) {
          setStats(offlineData.marketStats['–•–∞—Ä–∫—ñ–≤']);
          setError('–î–∞–Ω—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–º–∏ (–æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)');
        } else {
          setError('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞–Ω–∏—Ö –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ');
        }
      }
    } catch (err) {
      console.error('Error loading stats:', err);

      // Fallback –Ω–∞ –æ—Ñ—Ñ–ª–∞–π–Ω –¥–∞–Ω—ñ
      if (offlineData.marketStats['–•–∞—Ä–∫—ñ–≤']) {
        setStats(offlineData.marketStats['–•–∞—Ä–∫—ñ–≤']);
        setError('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –¥–∞–Ω—ñ (–æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)');
      } else {
        setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
      }
    } finally {
      setLoading(false);
    }
  };

  const features = [
    {
      icon: <PsychologyIcon fontSize="large" color="primary" />,
      title: '–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç',
      description: '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è –¥–ª—è —Ç–æ—á–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ',
    },
    {
      icon: <DataIcon fontSize="large" color="primary" />,
      title: '4 –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö',
      description: '–ê–Ω–∞–ª—ñ–∑—É—î–º–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ OLX, Dom.Ria, Realt.ua —Ç–∞ Address.ua',
    },
    {
      icon: <MapIcon fontSize="large" color="primary" />,
      title: '–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è',
      description: '–í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –æ–±\'—î–∫—Ç–∏ –Ω–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ–π –∫–∞—Ä—Ç—ñ –∑ —Ç–æ—á–Ω–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏',
    },
    {
      icon: <SpeedIcon fontSize="large" color="primary" />,
      title: '–®–≤–∏–¥–∫–∞ –æ—Ü—ñ–Ω–∫–∞',
      description: '–û—Ç—Ä–∏–º—É–π—Ç–µ –æ—Ü—ñ–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞ –ª—ñ—á–µ–Ω—ñ —Å–µ–∫—É–Ω–¥–∏',
    },
  ];

  const steps = [
    {
      step: '1',
      title: '–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ',
      description: '–í–∫–∞–∂—ñ—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞—à–æ—ó –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ',
    },
    {
      step: '2',
      title: 'AI –∞–Ω–∞–ª—ñ–∑',
      description: '–ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î —Ä–∏–Ω–æ–∫ —Ç–∞ –ø–æ–¥—ñ–±–Ω—ñ –æ–±\'—î–∫—Ç–∏',
    },
    {
      step: '3',
      title: '–û—Ç—Ä–∏–º–∞–π—Ç–µ –æ—Ü—ñ–Ω–∫—É',
      description: '–ú–∏—Ç—Ç—î–≤–∞ –æ—Ü—ñ–Ω–∫–∞ –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –∑–≤—ñ—Ç–æ–º',
    },
  ];

  return (
    <Container maxWidth="lg">
      {/* Hero —Å–µ–∫—Ü—ñ—è */}
      <Box sx={{ textAlign: 'center', py: 8 }}>
        <Typography variant="h1" gutterBottom>
          –û—Ü—ñ–Ω–∫–∞ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏
        </Typography>
        <Typography variant="h5" color="text.secondary" sx={{ mb: 4, maxWidth: 600, mx: 'auto' }}>
          –¢–æ—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö –∑ 4 –¥–∂–µ—Ä–µ–ª
        </Typography>

        <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', mb: 4 }}>
          <Button
            variant="contained"
            size="large"
            component={Link}
            to="/evaluate"
            startIcon={<AssessmentIcon />}
            sx={{ px: 4, py: 1.5 }}
          >
            –û—Ü—ñ–Ω–∏—Ç–∏ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å
          </Button>
          <Button
            variant="outlined"
            size="large"
            component={Link}
            to="/map"
            startIcon={<MapIcon />}
            sx={{ px: 4, py: 1.5 }}
          >
            –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ä—Ç—É
          </Button>
        </Box>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        {loading ? (
          <LinearProgress sx={{ maxWidth: 400, mx: 'auto' }} />
        ) : error ? (
          <Alert
            severity={isOnline ? "error" : "warning"}
            sx={{ maxWidth: 400, mx: 'auto' }}
            action={isOnline ? (
              <Button color="inherit" size="small" onClick={forceUpdate}>
                –û–Ω–æ–≤–∏—Ç–∏
              </Button>
            ) : null}
          >
            {error}
          </Alert>
        ) : stats && (
          <Box sx={{ display: 'flex', gap: 4, justifyContent: 'center', flexWrap: 'wrap' }}>
            <Chip
              label={`–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: ${stats.current_avg_price?.toLocaleString()} –≥—Ä–Ω/–º¬≤`}
              color="primary"
              variant="outlined"
            />
            <Chip
              label={`–û–≥–æ–ª–æ—à–µ–Ω—å: ${stats.total_listings || 0}`}
              color="secondary"
              variant="outlined"
            />
            <Chip
              label={`–†—ñ–≤–µ–Ω—å –ø–æ–ø–∏—Ç—É: ${stats.demand_level === 'high' ? '–í–∏—Å–æ–∫–∏–π' : stats.demand_level === 'medium' ? '–°–µ—Ä–µ–¥–Ω—ñ–π' : '–ù–∏–∑—å–∫–∏–π'}`}
              color="success"
              variant="outlined"
            />
          </Box>
        )}
      </Box>

      {/* –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ */}
      <Box sx={{ py: 6 }}>
        <Typography variant="h2" gutterBottom textAlign="center">
          –ß–æ–º—É –æ–±–∏—Ä–∞—é—Ç—å –Ω–∞—Å?
        </Typography>

        <Grid container spacing={4} sx={{ mt: 2 }}>
          {features.map((feature, index) => (
            <Grid item xs={12} sm={6} md={3} key={index}>
              <Card sx={{ height: '100%', textAlign: 'center', p: 3 }}>
                <CardContent>
                  <Box sx={{ mb: 2 }}>
                    {feature.icon}
                  </Box>
                  <Typography variant="h6" gutterBottom>
                    {feature.title}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    {feature.description}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      </Box>

      {/* –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î */}
      <Box sx={{ py: 6, backgroundColor: 'grey.50', borderRadius: 2 }}>
        <Typography variant="h2" gutterBottom textAlign="center">
          –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?
        </Typography>

        <Grid container spacing={4} sx={{ mt: 2 }}>
          {steps.map((step, index) => (
            <Grid item xs={12} md={4} key={index}>
              <Paper sx={{ p: 3, textAlign: 'center', height: '100%' }}>
                <Typography variant="h3" color="primary" gutterBottom>
                  {step.step}
                </Typography>
                <Typography variant="h6" gutterBottom>
                  {step.title}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {step.description}
                </Typography>
              </Paper>
            </Grid>
          ))}
        </Grid>
      </Box>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–π–æ–Ω—ñ–≤ */}
      {stats && stats.top_districts && (
        <Box sx={{ py: 6 }}>
          <Typography variant="h2" gutterBottom textAlign="center">
            –¶—ñ–Ω–∏ –ø–æ —Ä–∞–π–æ–Ω–∞—Ö –•–∞—Ä–∫–æ–≤–∞
          </Typography>

          <Grid container spacing={2}>
            {stats.top_districts.slice(0, 6).map((district, index) => (
              <Grid item xs={12} sm={6} md={4} key={index}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      {district.district}
                    </Typography>
                    <Typography variant="h4" color="primary">
                      {district.avg_price_per_sqm?.toLocaleString()} –≥—Ä–Ω/–º¬≤
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </Box>
      )}

      {/* CTA —Å–µ–∫—Ü—ñ—è */}
      <Box sx={{ py: 6, textAlign: 'center', backgroundColor: 'primary.main', color: 'primary.contrastText', borderRadius: 2 }}>
        <Typography variant="h3" gutterBottom>
          –ì–æ—Ç–æ–≤—ñ –æ—Ü—ñ–Ω–∏—Ç–∏ –≤–∞—à—É –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å?
        </Typography>
        <Typography variant="h6" sx={{ mb: 4, opacity: 0.9 }}>
          –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ç–æ—á–Ω—É –æ—Ü—ñ–Ω–∫—É –∑–∞ –ª—ñ—á–µ–Ω—ñ —Å–µ–∫—É–Ω–¥–∏
        </Typography>
        <Button
          variant="contained"
          size="large"
          component={Link}
          to="/evaluate"
          sx={{
            bgcolor: 'secondary.main',
            color: 'secondary.contrastText',
            px: 4,
            py: 1.5,
            fontSize: '1.1rem',
            '&:hover': {
              bgcolor: 'secondary.dark',
            },
          }}
        >
          –ü–æ—á–∞—Ç–∏ –æ—Ü—ñ–Ω–∫—É
        </Button>
      </Box>
    </Container>
  );
};

export default HomePage;
