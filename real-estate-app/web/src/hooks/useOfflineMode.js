import { useState, useEffect, useCallback } from 'react';

// –•—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–æ–º
export const useOfflineMode = () => {
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [isServiceWorkerReady, setIsServiceWorkerReady] = useState(false);
  const [syncStatus, setSyncStatus] = useState('idle'); // idle, syncing, synced, error

  // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –º–µ—Ä–µ–∂—ñ
  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      console.log('üîó –ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –æ–Ω–ª–∞–π–Ω');
    };

    const handleOffline = () => {
      setIsOnline(false);
      console.log('üì¥ –ü–µ—Ä–µ–π—à–ª–∏ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è Service Worker
  useEffect(() => {
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/sw.js')
        .then((registration) => {
          console.log('‚úÖ Service Worker –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ');
          setIsServiceWorkerReady(true);

          // –°–ª—É—Ö–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ Service Worker
          navigator.serviceWorker.addEventListener('message', (event) => {
            const { type, timestamp } = event.data;

            switch (type) {
              case 'SYNC_STARTED':
                setSyncStatus('syncing');
                break;
              case 'SYNC_COMPLETED':
                setSyncStatus('synced');
                setTimeout(() => setSyncStatus('idle'), 3000);
                break;
              case 'SYNC_FAILED':
                setSyncStatus('error');
                setTimeout(() => setSyncStatus('idle'), 5000);
                break;
              default:
                break;
            }
          });

          // –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π sync (—è–∫—â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è)
          if ('sync' in window.ServiceWorkerRegistration.prototype) {
            registration.sync.register('background-sync').catch((error) => {
              console.log('Background sync registration failed:', error);
            });
          }

          // –†–µ—î—Å—Ç—Ä—É—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É (—è–∫—â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è)
          if ('periodicSync' in window.ServiceWorkerRegistration.prototype) {
            registration.periodicSync.register('update-cache', {
              minInterval: 24 * 60 * 60 * 1000, // 24 –≥–æ–¥–∏–Ω–∏
            }).catch((error) => {
              console.log('Periodic sync registration failed:', error);
            });
          }
        })
        .catch((error) => {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó Service Worker:', error);
        });
    }
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
  const syncData = useCallback(async () => {
    if (!isServiceWorkerReady) {
      console.warn('Service Worker –Ω–µ –≥–æ—Ç–æ–≤–∏–π');
      return false;
    }

    try {
      setSyncStatus('syncing');

      // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Service Worker –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
      const registration = await navigator.serviceWorker.ready;
      registration.active.postMessage({ type: 'MANUAL_SYNC' });

      // –ß–µ–∫–∞—î–º–æ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
      return new Promise((resolve) => {
        const timeout = setTimeout(() => {
          setSyncStatus('idle');
          resolve(false);
        }, 10000);

        const messageHandler = (event) => {
          if (event.data.type === 'SYNC_COMPLETED' || event.data.type === 'SYNC_FAILED') {
            clearTimeout(timeout);
            navigator.serviceWorker.removeEventListener('message', messageHandler);
            setSyncStatus(event.data.type === 'SYNC_COMPLETED' ? 'synced' : 'error');
            setTimeout(() => setSyncStatus('idle'), 3000);
            resolve(event.data.type === 'SYNC_COMPLETED');
          }
        };

        navigator.serviceWorker.addEventListener('message', messageHandler);
      });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
      setSyncStatus('error');
      setTimeout(() => setSyncStatus('idle'), 5000);
      return false;
    }
  }, [isServiceWorkerReady]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–µ—à—É
  const checkCache = useCallback(async () => {
    if (!('caches' in window)) {
      return { hasCache: false, cacheSize: 0 };
    }

    try {
      const cacheNames = await caches.keys();
      let totalSize = 0;

      for (const cacheName of cacheNames) {
        const cache = await caches.open(cacheName);
        const requests = await cache.keys();
        totalSize += requests.length;
      }

      return {
        hasCache: totalSize > 0,
        cacheSize: totalSize,
        cacheNames,
      };
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–µ—à—É:', error);
      return { hasCache: false, cacheSize: 0 };
    }
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É
  const clearCache = useCallback(async () => {
    if (!('caches' in window)) {
      return false;
    }

    try {
      const cacheNames = await caches.keys();

      await Promise.all(
        cacheNames.map(cacheName => caches.delete(cacheName))
      );

      console.log('üóëÔ∏è –ö–µ—à –æ—á–∏—â–µ–Ω–æ');
      return true;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É:', error);
      return false;
    }
  }, []);

  return {
    isOnline,
    isServiceWorkerReady,
    syncStatus,
    syncData,
    checkCache,
    clearCache,
  };
};

export default useOfflineMode;
