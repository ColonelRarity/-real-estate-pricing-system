import { useState, useEffect, useCallback } from 'react';
import { propertyAPI } from '../services/api';

// –•—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –æ—Ñ—Ñ–ª–∞–π–Ω –¥–∞–Ω–∏–º–∏
export const useOfflineData = () => {
  const [offlineData, setOfflineData] = useState({
    cities: [],
    marketStats: {},
    properties: [],
  });
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [lastUpdate, setLastUpdate] = useState(null);

  // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –º–µ—Ä–µ–∂—ñ
  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      console.log('üîó –ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –æ–Ω–ª–∞–π–Ω - –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ');
      updateOfflineData();
    };

    const handleOffline = () => {
      setIsOnline(false);
      console.log('üì¥ –ü–µ—Ä–µ–π—à–ª–∏ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  useEffect(() => {
    loadOfflineData();
  }, []);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –∫–µ—à—É –∞–±–æ —Å–µ—Ä–≤–µ—Ä–∞
  const loadOfflineData = useCallback(async () => {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ –∫–µ—à—É
      const cachedData = localStorage.getItem('offlineData');
      if (cachedData) {
        const parsedData = JSON.parse(cachedData);
        setOfflineData(parsedData.data);
        setLastUpdate(new Date(parsedData.timestamp));
        console.log('üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–∞–Ω—ñ –∑ –∫–µ—à—É');
      }

      // –Ø–∫—â–æ –æ–Ω–ª–∞–π–Ω, –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
      if (isOnline) {
        await updateOfflineData();
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Ñ—Ñ–ª–∞–π–Ω –¥–∞–Ω–∏—Ö:', error);
    }
  }, [isOnline]);

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Å–µ—Ä–≤–µ—Ä–∞
  const updateOfflineData = useCallback(async () => {
    try {
      console.log('üîÑ –û–Ω–æ–≤–ª—é—é –æ—Ñ—Ñ–ª–∞–π–Ω –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞...');

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ
      const [citiesResponse, kharkivStatsResponse] = await Promise.all([
        propertyAPI.getCities(),
        propertyAPI.getMarketStats('–•–∞—Ä–∫—ñ–≤'),
      ]);

      const newOfflineData = {
        cities: citiesResponse.data.cities || [],
        marketStats: {
          '–•–∞—Ä–∫—ñ–≤': kharkivStatsResponse.data,
        },
        properties: [], // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
      };

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
      const cacheData = {
        data: newOfflineData,
        timestamp: new Date().toISOString(),
      };

      localStorage.setItem('offlineData', JSON.stringify(cacheData));
      setOfflineData(newOfflineData);
      setLastUpdate(new Date());

      console.log('‚úÖ –û—Ñ—Ñ–ª–∞–π–Ω –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ—Ñ–ª–∞–π–Ω –¥–∞–Ω–∏—Ö:', error);
    }
  }, []);

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º—ñ—Å—Ç–∞
  const getCityData = useCallback((city) => {
    if (!offlineData.cities.includes(city)) {
      return null;
    }

    return {
      stats: offlineData.marketStats[city] || null,
      districts: [], // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –æ–∫—Ä–µ–º–æ
    };
  }, [offlineData]);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –¥–∞–Ω—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 –≥–æ–¥–∏–Ω)
  const isDataFresh = useCallback(() => {
    if (!lastUpdate) return false;
    const hoursDiff = (new Date() - new Date(lastUpdate)) / (1000 * 60 * 60);
    return hoursDiff < 24;
  }, [lastUpdate]);

  // –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
  const forceUpdate = useCallback(async () => {
    await updateOfflineData();
  }, [updateOfflineData]);

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
  const saveLocalValuation = useCallback((propertyId, valuationData) => {
    try {
      const localValuations = JSON.parse(localStorage.getItem('localValuations') || '{}');
      localValuations[propertyId] = {
        ...valuationData,
        savedAt: new Date().toISOString(),
        synced: false, // –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
      };

      localStorage.setItem('localValuations', JSON.stringify(localValuations));
      console.log('üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –æ—Ü—ñ–Ω–∫—É –ª–æ–∫–∞–ª—å–Ω–æ:', propertyId);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏:', error);
    }
  }, []);

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –æ—Ü—ñ–Ω–æ–∫
  const getLocalValuations = useCallback(() => {
    try {
      return JSON.parse(localStorage.getItem('localValuations') || '{}');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –æ—Ü—ñ–Ω–æ–∫:', error);
      return {};
    }
  }, []);

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –æ—Ü—ñ–Ω–æ–∫ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
  const syncLocalValuations = useCallback(async () => {
    try {
      const localValuations = getLocalValuations();
      const unsynced = Object.entries(localValuations)
        .filter(([_, data]) => !data.synced);

      if (unsynced.length === 0) {
        console.log('üì§ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó');
        return true;
      }

      console.log(`üì§ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—é ${unsynced.length} –ª–æ–∫–∞–ª—å–Ω–∏—Ö –æ—Ü—ñ–Ω–æ–∫...`);

      // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥–∞–Ω—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (—Ç—É—Ç –±—É–¥–µ API –∑–∞–ø–∏—Ç)
      // const response = await propertyAPI.syncValuations(unsynced);

      // –Ø–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, –ø–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ
      const updatedValuations = { ...localValuations };
      unsynced.forEach(([propertyId, _]) => {
        updatedValuations[propertyId].synced = true;
      });

      localStorage.setItem('localValuations', JSON.stringify(updatedValuations));
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ñ –æ—Ü—ñ–Ω–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ');

      return true;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
      return false;
    }
  }, [getLocalValuations]);

  return {
    offlineData,
    isOnline,
    isDataFresh: isDataFresh(),
    lastUpdate,
    getCityData,
    updateOfflineData,
    forceUpdate,
    saveLocalValuation,
    getLocalValuations,
    syncLocalValuations,
  };
};

export default useOfflineData;
