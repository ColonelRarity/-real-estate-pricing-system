import React from 'react';
import {
  Box,
  Chip,
  Tooltip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  LinearProgress,
} from '@mui/material';
import {
  Wifi as WifiIcon,
  WifiOff as WifiOffIcon,
  Sync as SyncIcon,
  CloudSync as CloudSyncIcon,
  Refresh as RefreshIcon,
} from '@mui/icons-material';
import useOfflineMode from '../hooks/useOfflineMode';

const OfflineIndicator = () => {
  const {
    isOnline,
    isServiceWorkerReady,
    syncStatus,
    syncData,
    checkCache,
    clearCache,
  } = useOfflineMode();

  const [cacheInfo, setCacheInfo] = React.useState({ hasCache: false, cacheSize: 0 });
  const [cacheDialogOpen, setCacheDialogOpen] = React.useState(false);

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  React.useEffect(() => {
    const updateCacheInfo = async () => {
      const info = await checkCache();
      setCacheInfo(info);
    };

    updateCacheInfo();
  }, [checkCache]);

  const handleSync = async () => {
    await syncData();
  };

  const handleOpenCacheDialog = () => {
    setCacheDialogOpen(true);
  };

  const handleCloseCacheDialog = () => {
    setCacheDialogOpen(false);
  };

  const handleClearCache = async () => {
    const success = await clearCache();
    if (success) {
      const info = await checkCache();
      setCacheInfo(info);
      handleCloseCacheDialog();
    }
  };

  const getSyncStatusIcon = () => {
    switch (syncStatus) {
      case 'syncing':
        return <SyncIcon sx={{ animation: 'spin 1s linear infinite' }} />;
      case 'synced':
        return <CloudSyncIcon color="success" />;
      case 'error':
        return <SyncIcon color="error" />;
      default:
        return <SyncIcon />;
    }
  };

  const getSyncStatusColor = () => {
    switch (syncStatus) {
      case 'syncing':
        return 'warning';
      case 'synced':
        return 'success';
      case 'error':
        return 'error';
      default:
        return 'default';
    }
  };

  return (
    <>
      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω */}
        <Tooltip title={isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º'}>
          <Chip
            icon={isOnline ? <WifiIcon /> : <WifiOffIcon />}
            label={isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω'}
            color={isOnline ? 'success' : 'default'}
            variant="outlined"
            size="small"
          />
        </Tooltip>

        {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä Service Worker */}
        {isServiceWorkerReady && (
          <Tooltip title="Service Worker –∞–∫—Ç–∏–≤–Ω–∏–π">
            <Chip
              icon={<CloudSyncIcon />}
              label="PWA"
              color="primary"
              variant="outlined"
              size="small"
            />
          </Tooltip>
        )}

        {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó */}
        {isOnline && (
          <Tooltip title={
            syncStatus === 'syncing' ? '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è...' :
            syncStatus === 'synced' ? '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ' :
            syncStatus === 'error' ? '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó' :
            '–ì–æ—Ç–æ–≤–∏–π –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó'
          }>
            <IconButton
              size="small"
              onClick={handleSync}
              disabled={syncStatus === 'syncing'}
              sx={{
                color: syncStatus === 'synced' ? 'success.main' :
                       syncStatus === 'error' ? 'error.main' : 'inherit',
              }}
            >
              {getSyncStatusIcon()}
            </IconButton>
          </Tooltip>
        )}

        {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–µ—à—É */}
        {cacheInfo.hasCache && (
          <Tooltip title={`${cacheInfo.cacheSize} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É –∫–µ—à—ñ`}>
            <IconButton
              size="small"
              onClick={handleOpenCacheDialog}
              sx={{ fontSize: '0.75rem' }}
            >
              üíæ
            </IconButton>
          </Tooltip>
        )}
      </Box>

      {/* –î—ñ–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–µ—à–µ–º */}
      <Dialog open={cacheDialogOpen} onClose={handleCloseCacheDialog} maxWidth="sm" fullWidth>
        <DialogTitle>–ö–µ—à –¥–æ–¥–∞—Ç–∫—É</DialogTitle>
        <DialogContent>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
            –ö–µ—à –º—ñ—Å—Ç–∏—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ.
          </Typography>

          <Box sx={{ mb: 3 }}>
            <Typography variant="body1" gutterBottom>
              <strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É:</strong>
            </Typography>
            <Typography variant="body2">
              ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: {cacheInfo.cacheSize}
            </Typography>
            <Typography variant="body2">
              ‚Ä¢ –ù–∞–∑–≤–∏ –∫–µ—à—ñ–≤: {cacheInfo.cacheNames?.join(', ') || '–Ω–µ–º–∞—î'}
            </Typography>
          </Box>

          <Alert severity="info" sx={{ mb: 2 }}>
            –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –¥–æ–∑–≤–æ–ª–∏—Ç—å –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ –º—ñ—Å—Ü–µ, –∞–ª–µ —Ç–∏–º—á–∞—Å–æ–≤–æ –ø–æ–≥—ñ—Ä—à–∏—Ç—å —Ä–æ–±–æ—Ç—É –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ.
          </Alert>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseCacheDialog}>–°–∫–∞—Å—É–≤–∞—Ç–∏</Button>
          <Button
            onClick={handleClearCache}
            color="error"
            startIcon={<RefreshIcon />}
          >
            –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à
          </Button>
        </DialogActions>
      </Dialog>

      {/* CSS –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó */}
      <style>
        {`
          @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
          }
        `}
      </style>
    </>
  );
};

export default OfflineIndicator;
